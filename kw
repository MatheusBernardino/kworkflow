#!/bin/bash

# Note: the following line should not be modified and neither the token should
# be repeated in this file. It will be replaced during installation with the
# respective installation prefix.
KW_INSTALL_PREFIX=${KW_INSTALL_PREFIX:-"##KW_INSTALL_PREFIX_TOKEN##"}

# Major install paths
KW_LIB_DIR=${KW_LIB_DIR:-"$KW_INSTALL_PREFIX/lib/kw/"}
KW_SHARE_DIR=${KW_SHARE_DIR:-"$KW_INSTALL_PREFIX/share/kw/"}
KW_DATA_DIR=${KW_DATA_DIR:-"$HOME/.kw/"}
KW_GLOBAL_CONFIG_DIR=${KW_GLOBAL_CONFIG_DIR:-"/usr/etc/kw/"}

# Derivated or non-major paths
KW_PLUGINS_DIR=${KW_GLOBAL_CONFIG_DIR:-"$KW_LIB_DIR/plugins/"}
KW_CACHE_DIR="$HOME/.cache/kw/"
if [[ ! -d "$KW_CACHE_DIR" ]]; then
  mkdir -p "$KW_CACHE_DIR"
fi

function kw()
{
  action=$1
  shift

  case "$action" in
    init)
      (
        . "$KW_LIB_DIR/init.sh" --source-only

        init_kw
        return "$?"
      )
      ;;
    mount|mo)
      (
        . "$KW_LIB_DIR"/vm.sh --source-only

        vm_mount
        local ret=$?
        alert_completion "kw build" "$1"
        return $ret
      )
      ;;
    umount|um)
      (
        . "$KW_LIB_DIR"/vm.sh --source-only

        vm_umount
        local ret=$?
        alert_completion "kw build" "$1"
        return $ret
      )
      ;;
    boot|bo)
      (
        . "$KW_LIB_DIR"/vm.sh --source-only

        vm_boot
      )
      ;;
    up|u)
      (
        . "$KW_LIB_DIR"/vm.sh --source-only

        vm_up
      )
      ;;
    build|b)
      (
        . "$KW_LIB_DIR"/mk.sh --source-only

        mk_build
        local ret=$?
        alert_completion "kw build" "$1"
        return $ret
      )
      ;;
    deploy|d)
      (
        . "$KW_LIB_DIR"/mk.sh --source-only

        kernel_deploy "$@"
        local ret="$?"
        alert_completion "kw deploy" "$1"
        return "$ret"
      )
      ;;
    bd)
      (
        . "$KW_LIB_DIR"/mk.sh --source-only

        mk_build && kernel_deploy "$@"
        local ret="$?"
        alert_completion "kw db" "$1"
        return "$ret"
      )
      ;;
    ssh|s)
      (
        . "$KW_LIB_DIR"/vm.sh --source-only

        vm_ssh $@
      )
      ;;
    vars|v)
      (
        . "$KW_LIB_DIR"/kw_config_loader.sh --source-only

        show_variables
      )
      ;;
    codestyle|c)
      (
      . "$KW_LIB_DIR"/checkpatch_wrapper.sh --source-only

        execute_checkpatch $@
      )
      ;;
    maintainers|m)
      (
        . "$KW_LIB_DIR"/get_maintainer_wrapper.sh --source-only

        execute_get_maintainer $@
      )
      ;;
    configm|g)
      (
        . "$KW_LIB_DIR"/config_manager.sh --source-only

        execute_config_manager $@
      )
      ;;
    help|h)
      (
        . "$KW_LIB_DIR"/help.sh --source-only

        kworkflow-help
      )
      ;;
    explore|e)
      (
        . "$KW_LIB_DIR"/explore.sh --source-only

        explore "$@"
      )
      ;;
    man)
      (
        . $KW_LIB_DIR/help.sh --source-only

        kworkflow-man
      )
      ;;
    *)
      (
        . "$KW_LIB_DIR"/help.sh --source-only

        complain "Invalid option"
        kworkflow-help
        return 1
      )
      ;;
  esac
}

kw "$@"
